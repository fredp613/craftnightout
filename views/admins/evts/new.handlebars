<div class="row">
	
	<div class="col-sm-5">
		<strong>New Event</strong>
		<hr>
		<form method="post" action="/admins/evts/create"> 
		<input type="hidden" name="_csrf" value={{csrfToken}} />
		<input type="text" class="form-control" name="title" id="txtTitle" placeholder="Event Title" required=true></input><hr>
		<input type="text" class="form-control" name="hostedBy" id="txtHostedBy" placeholder="Hosted By" required=true></input><hr>
		<input type="text" class="form-control" name="facebook" id="txtFacebook" placeholder="Facebook Link" required=true></input><hr>
		<input type="text" class="form-control" name="instagram" id="txtInstagram" placeholder="Instagram Link" required=true></input>
		<hr>

		<div class='input-group date' id='datetimepicker1'>
			<input type='text' placeholder="Event Date" id="txtDate" name="eventDate" class="form-control" />
			<span class="input-group-addon">
				<span class="glyphicon glyphicon-calendar"></span>
			</span>
		</div><hr>


		<input type="text" class="form-control" name="eventStartTime" id="txtStartTime" placeholder="Event Start Time" required=true></input><hr>
		<input type="text" class="form-control" name="eventEndTime" id="txtEndTime" placeholder="Event Start Time" required=true></input><hr>
		<div class="form-group">
			<div class="checkbox">
				<label>
					<input type="checkbox"  name="isPrivate" id="txtPrivate"  required=true>Is Private
				</label>
			</div>
		</div>
		<hr>
		<textarea name="description" placeholder="Event Description" class="form-control" id="txtDescription" rows="5"></textarea><hr>
		<textarea name="paypalButton" placeholder="Paypal Button" class="form-control" id="txtPaypalButton" rows="5"></textarea>
		<hr>
		<select class="form-control">
			<option>Cardmaking</option>
			<option>Jewellery</option>
		</select><hr>
		<input type="text" class="form-control" name="locationName" id="txtLocationName" placeholder="Location Name" required=true></input><hr>
		<div id="locationField">
		<input id="autocomplete" id="txtLocation" class="form-control" name="address" placeholder="Enter address" onInput="toggleSubmit()"  onFocus="geolocate()" type="text"></input>
		</div>
		<hr>
		<input type="text" name="lat" id="lat" style="display:none;"></input>
		<input type="text" name="lng" id="long" style="display:none;"></input>
		<input type="submit" disabled class="btn btn-primary" id="submit" value='Publish'></input>
		</form>
		<hr>

	</div>

	<div id="map" class="col-sm-7" style="width:55%;height:800px"></div>
</div>


<!--
<table id="address" style="display:none;">
  <tr>
	<td class="label">Street address</td>
	<td class="slimField"><input class="field" id="street_number"
		  disabled="true"></input></td>
	<td class="wideField" colspan="2"><input class="field" id="route"
		  disabled="true"></input></td>
  </tr>
  <tr>
	<td class="label">City</td>
	<td class="wideField" colspan="3"><input class="field" id="locality"
		  disabled="true"></input></td>
  </tr>
  <tr>
	<td class="label">State</td>
	<td class="slimField"><input class="field"
		  id="administrative_area_level_1" disabled="true"></input></td>
	<td class="label">Zip code</td>
	<td class="wideField"><input class="field" id="postal_code"
		  disabled="true"></input></td>
  </tr>
  <tr>
	<td class="label">Country</td>
	<td class="wideField" colspan="3"><input class="field"
		  id="country" disabled="true"></input></td>
  </tr>
</table>
-->
    <script>
      // This example displays an address form, using the autocomplete feature
      // of the Google Places API to help users fill in the information.

      // This example requires the Places library. Include the libraries=places
      // parameter when you first load the API. For example:
      // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">
 	  function toggleSubmit() {
		document.getElementById("submit").setAttribute("disabled", "disabled");
	  }

      var placeSearch, autocomplete;
      var componentForm = {
        street_number: 'short_name',
        route: 'long_name',
        locality: 'long_name',
        administrative_area_level_1: 'short_name',
        country: 'long_name',
        postal_code: 'short_name'
      };

      function initAutocomplete() {
		  var map;
		  map = new google.maps.Map(document.getElementById('map'), {
			center: {lat: -34.397, lng: 150.644},
			zoom: 8
		  });
      
        // Create the autocomplete object, restricting the search to geographical
        // location types.
        autocomplete = new google.maps.places.Autocomplete(
            /** @type {!HTMLInputElement} */(document.getElementById('autocomplete')),
            {types: ['geocode', 'establishment']})

        // When the user selects an address from the dropdown, populate the address
        // fields in the form.
        autocomplete.addListener('place_changed', fillInAddress);
      }

      function fillInAddress() {
        // Get the place details from the autocomplete object.
        var place = autocomplete.getPlace();

        //for (var component in componentForm) {
        //  document.getElementById(component).value = '';
        //  document.getElementById(component).disabled = false;
        //}

        // Get each component of the address from the place details
        // and fill the corresponding field on the form.
        //for (var i = 0; i < place.address_components.length; i++) {
        //  var addressType = place.address_components[i].types[0];
        //  if (componentForm[addressType]) {
        //    var val = place.address_components[i][componentForm[addressType]];
        //    document.getElementById(addressType).value = val;
        //  }
        //}
		console.log(place);
		initMapWithParams(place);
      }

      // Bias the autocomplete object to the user's geographical location,
      // as supplied by the browser's 'navigator.geolocation' object.
      function geolocate() {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function(position) {
            var geolocation = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };
            var circle = new google.maps.Circle({
              center: geolocation,
              radius: position.coords.accuracy,
            });
            autocomplete.setBounds(circle.getBounds());
          });
        }
	}

	function initMapWithParams(place) {
		if (!(place.geometry.viewport)) {
			return;
		}
	    var latitude = place.geometry.viewport.f.b || null;
		var longitude = place.geometry.viewport.b.b || null;
		var placeId = place.place_id || null;
		document.getElementById("lat").value = latitude;
		document.getElementById("long").value = longitude;
		var map = new google.maps.Map(document.getElementById('map'), {
			  center: {lat: latitude, lng: longitude},
			  zoom: 15
        });

        var infowindow = new google.maps.InfoWindow();
        var service = new google.maps.places.PlacesService(map);

        service.getDetails({
          placeId: placeId
        }, function(place, status) {
          if (status === google.maps.places.PlacesServiceStatus.OK) {
            var marker = new google.maps.Marker({
              map: map,
              position: place.geometry.location
            });
            google.maps.event.addListener(marker, 'click', function() {
              infowindow.setContent('<div><strong>' + place.name + '</strong><br>' +
                'Place ID: ' + place.place_id + '<br>' +
                place.formatted_address + '</div>');
              infowindow.open(map, this);
            });
          }
        });

		document.getElementById("submit").removeAttribute("disabled");
	}
	 function initMap() {
    
	    var map = new google.maps.Map(document.getElementById('map'), {
			  center: {lat:45.5375801 , lng: -76.35391579999998},
			  zoom: 15
        });
		//var latLng = new google.maps.LatLng(-8.064903, -34.896872)
        
		var infowindow = new google.maps.InfoWindow();
        var service = new google.maps.places.PlacesService(map);

        service.getDetails({
          placeId: 'ChIJrxNRX7IFzkwR7RXdMeFRaoo'
        }, function(place, status) {
          if (status === google.maps.places.PlacesServiceStatus.OK) {
            var marker = new google.maps.Marker({
              map: map,
              position: place.geometry.location
            });
            google.maps.event.addListener(marker, 'click', function() {
              infowindow.setContent('<div><strong>' + place.name + '</strong><br>' +
                'Place ID: ' + place.place_id + '<br>' +
                place.formatted_address + '</div>');
              infowindow.open(map, this);
            });
          }
        });
      }
	 var dtp = document.getElementById("datetimepicker1");
	 dtp.datetimepicker();
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDyEwU_KjjurmOf6p1MSa0blyhv7TlWH9c&libraries=places&callback=initAutocomplete&initMap"
        async defer></script>

<!--	<script async defer
    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDyEwU_KjjurmOf6p1MSa0blyhv7TlWH9c&libraries=places&callback=initMap">
   </script> -->





