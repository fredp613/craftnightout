
<div class="row" style="margin-top:50px">
	{{#if craftevent}}
		<div class="col-md-6">
		   <div class="feature-item">
				<h2 class="text-muted">{{craftevent.title}}</h2>
				<p class="text-muted">{{craftevent.description}}</p>
				<p class="text-muted">{{craftevent.date}}</p>
				<p class="text-muted">{{craftevent.locationName}}</p>
				<p class="text-muted">{{craftevent.address}}</p>
			</div>
		</div>
		<div class="col-md-6">
			
		</div>
	{{/if}}
	<div class="col-lg-4">
		<div>
			<h2>This is the event name</h2>
		</div>
		<div>
			<h3>Hosted by: This is the host name</h3>
		</div>
		<div>
			<h2>Location: Baton Rouge</h2>
			<h3>Address: 140 York Street, Ottawa, Ontario</h3>
		</div>
		<div>
			<!-- facebook and instagram links -->
		</div>
		<div>
			<form action="https://www.paypal.com/cgi-bin/webscr" method="post" target="_top">
			<input type="hidden" name="cmd" value="_s-xclick">
			<input type="hidden" name="hosted_button_id" value="MUFRWWW7865FN">
			<table>
			<tr><td><input type="hidden" name="on0" value="Number of Tickets">Number of Tickets</td></tr><tr><td><select name="os0">
			<option value="1 Ticket">1 Ticket $25.00 CAD</option>
			<option value="2 Tickets">2 Tickets $50.00 CAD</option>
			<option value="3 Tickets">3 Tickets $75.00 CAD</option>
			<option value="4 Tickets">4 Tickets $100.00 CAD</option>
			</select> </td></tr>
			<tr><td><input type="hidden" name="on1" value="Coupon Code">Coupon Code</td></tr><tr><td><input type="text" name="os1" maxlength="200"></td></tr>
			</table>
			<input type="hidden" name="currency_code" value="CAD">
			<input type="image" src="https://www.paypalobjects.com/en_US/i/btn/btn_buynowCC_LG.gif" border="0" name="submit" alt="PayPal - The safer, easier way to pay online!">
			<img alt="" border="0" src="https://www.paypalobjects.com/en_US/i/scr/pixel.gif" width="1" height="1">
			</form>
		</div>
	</div>
	<div class="col-lg-8">
		<div id="map" style="height:800px"></div>
	</div>
</div>



    <script>
      // This example displays an address form, using the autocomplete feature
      // of the Google Places API to help users fill in the information.

      // This example requires the Places library. Include the libraries=places
      // parameter when you first load the API. For example:
      // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">
 	  function toggleSubmit() {
		document.getElementById("submit").setAttribute("disabled", "disabled");
	  }

      var placeSearch, autocomplete;
      var componentForm = {
        street_number: 'short_name',
        route: 'long_name',
        locality: 'long_name',
        administrative_area_level_1: 'short_name',
        country: 'long_name',
        postal_code: 'short_name'
      };

      function initAutocomplete() {
		  var map;
		  map = new google.maps.Map(document.getElementById('map'), {
			center: {lat: -34.397, lng: 150.644},
			zoom: 8
		  });
      
        // Create the autocomplete object, restricting the search to geographical
        // location types.
        autocomplete = new google.maps.places.Autocomplete(
            /** @type {!HTMLInputElement} */(document.getElementById('autocomplete')),
            {types: ['geocode', 'establishment']})

        // When the user selects an address from the dropdown, populate the address
        // fields in the form.
        autocomplete.addListener('place_changed', fillInAddress);
      }

      function fillInAddress() {
        // Get the place details from the autocomplete object.
        var place = autocomplete.getPlace();

        //for (var component in componentForm) {
        //  document.getElementById(component).value = '';
        //  document.getElementById(component).disabled = false;
        //}

        // Get each component of the address from the place details
        // and fill the corresponding field on the form.
        //for (var i = 0; i < place.address_components.length; i++) {
        //  var addressType = place.address_components[i].types[0];
        //  if (componentForm[addressType]) {
        //    var val = place.address_components[i][componentForm[addressType]];
        //    document.getElementById(addressType).value = val;
        //  }
        //}
		console.log(place);
		initMapWithParams(place);
      }

      // Bias the autocomplete object to the user's geographical location,
      // as supplied by the browser's 'navigator.geolocation' object.
      function geolocate() {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function(position) {
            var geolocation = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };
            var circle = new google.maps.Circle({
              center: geolocation,
              radius: position.coords.accuracy,
            });
            autocomplete.setBounds(circle.getBounds());
          });
        }
	}

	function initMapWithParams(place) {
		if (!(place.geometry.viewport)) {
			return;
		}
	    var latitude = place.geometry.viewport.f.b || null;
		var longitude = place.geometry.viewport.b.b || null;
		var placeId = place.place_id || null;
		document.getElementById("lat").value = latitude;
		document.getElementById("long").value = longitude;
		var map = new google.maps.Map(document.getElementById('map'), {
			  center: {lat: latitude, lng: longitude},
			  zoom: 15
        });

        var infowindow = new google.maps.InfoWindow();
        var service = new google.maps.places.PlacesService(map);

        service.getDetails({
          placeId: placeId
        }, function(place, status) {
          if (status === google.maps.places.PlacesServiceStatus.OK) {
            var marker = new google.maps.Marker({
              map: map,
              position: place.geometry.location
            });
            google.maps.event.addListener(marker, 'click', function() {
              infowindow.setContent('<div><strong>' + place.name + '</strong><br>' +
                'Place ID: ' + place.place_id + '<br>' +
                place.formatted_address + '</div>');
              infowindow.open(map, this);
            });
          }
        });

		document.getElementById("submit").removeAttribute("disabled");
	}
	 function initMap() {
    
	    var map = new google.maps.Map(document.getElementById('map'), {
			  center: {lat:45.5375801 , lng: -76.35391579999998},
			  zoom: 15
        });
		//var latLng = new google.maps.LatLng(-8.064903, -34.896872)
        
		var infowindow = new google.maps.InfoWindow();
        var service = new google.maps.places.PlacesService(map);

        service.getDetails({
          placeId: 'ChIJrxNRX7IFzkwR7RXdMeFRaoo'
        }, function(place, status) {
          if (status === google.maps.places.PlacesServiceStatus.OK) {
            var marker = new google.maps.Marker({
              map: map,
              position: place.geometry.location
            });
            google.maps.event.addListener(marker, 'click', function() {
              infowindow.setContent('<div><strong>' + place.name + '</strong><br>' +
                'Place ID: ' + place.place_id + '<br>' +
                place.formatted_address + '</div>');
              infowindow.open(map, this);
            });
          }
        });
      }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDyEwU_KjjurmOf6p1MSa0blyhv7TlWH9c&libraries=places&callback=initAutocomplete&initMap"
        async defer></script>


